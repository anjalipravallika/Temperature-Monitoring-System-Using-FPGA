VERILOG CODE:

`timescale 1ns / 1ps
module temp_monsys(input [7:0] bin, //input 8bit binary
output reg buz, // output light buzzer
// input [7:0] lim1, // highest limit for temperature
//input [7:0] lim2, // lowest limit for temperature
output reg [6:0]dis1, // ones digit 7seg display
output reg [6:0]dis2 // tens digit 7seg display
);
reg g1,g2,l1,l2,e1,e2;
reg [7:0]lim1,lim2;
always @(bin)
begin
lim1=8'b00011110; lim2=8'b00010100;
//two digit 7seg display
case(bin)
8'b00000000 : begin dis1 = 7'b1111110; dis2=7'b1111110; end
8'b00000001 : begin dis1 = 7'b0110000; dis2=7'b1111110; end
8'b00000010 : begin dis1 = 7'b1101101; dis2=7'b1111110; end
8'b00000011 : begin dis1 = 7'b1111001; dis2=7'b1111110; end
8'b00000100 : begin dis1 = 7'b0110011; dis2=7'b1111110; end
8'b00000101 : begin dis1 = 7'b1011011; dis2=7'b1111110; end
8'b00000110 : begin dis1 = 7'b1011111; dis2=7'b1111110; end
8'b00000111 : begin dis1 = 7'b1110000; dis2=7'b1111110; end
8'b00001000 : begin dis1 = 7'b1111111; dis2=7'b1111110; end
8'b00001001 : begin dis1 = 7'b1110011; dis2=7'b1111110; end
8'b00001010 : begin dis1 = 7'b1111110; dis2=7'b0110000; end
8'b00001011 : begin dis1 = 7'b0110000; dis2=7'b0110000; end
8'b00001100 : begin dis1 = 7'b1101101; dis2=7'b0110000; end
8'b00001101 : begin dis1 = 7'b1111001; dis2=7'b0110000; end
8'b00001110 : begin dis1 = 7'b0110011; dis2=7'b0110000; end
8'b00001111 : begin dis1 = 7'b1011011; dis2=7'b0110000; end
8'b00010000 : begin dis1 = 7'b1011111; dis2=7'b0110000; end
8'b00010001 : begin dis1 = 7'b1110000; dis2=7'b0110000; end
8'b00010010 : begin dis1 = 7'b1111111; dis2=7'b0110000; end
8'b00010011 : begin dis1 = 7'b1110011; dis2=7'b0110000; end
8'b00010100 : begin dis1 = 7'b1111110; dis2=7'b1101101; end
8'b00010101 : begin dis1 = 7'b0110000; dis2=7'b1101101; end
8'b00010110 : begin dis1 = 7'b1101101; dis2=7'b1101101; end
8'b00010111 : begin dis1 = 7'b1111001; dis2=7'b1101101; end
8'b00011000 : begin dis1 = 7'b0110011; dis2=7'b1101101; end
8'b00011001 : begin dis1 = 7'b1011011; dis2=7'b1101101; end
8'b00011010 : begin dis1 = 7'b1011111; dis2=7'b1101101; end
8'b00011011 : begin dis1 = 7'b1110000; dis2=7'b1101101; end
8'b00011100 : begin dis1 = 7'b1111111; dis2=7'b1101101; end
8'b00011101 : begin dis1 = 7'b1110011; dis2=7'b1101101; end
8'b00011110 : begin dis1 = 7'b1111110; dis2=7'b1111001; end
8'b00011111 : begin dis1 = 7'b0110000; dis2=7'b1111001; end
8'b00100000 : begin dis1 = 7'b1101101; dis2=7'b1111001; end
8'b00100001 : begin dis1 = 7'b1111001; dis2=7'b1111001; end
8'b00100010 : begin dis1 = 7'b0110011; dis2=7'b1111001; end
8'b00100011 : begin dis1 = 7'b1011011; dis2=7'b1111001; end
8'b00100100 : begin dis1 = 7'b1011111; dis2=7'b1111001; end
8'b00100101 : begin dis1 = 7'b1110000; dis2=7'b1111001; end
8'b00100110 : begin dis1 = 7'b1111111; dis2=7'b1111001; end
8'b00100111 : begin dis1 = 7'b1110011; dis2=7'b1111001; end
8'b00101000 : begin dis1 = 7'b1111110; dis2=7'b0110011; end
8'b00101001 : begin dis1 = 7'b0110000; dis2=7'b0110011; end
8'b00101010 : begin dis1 = 7'b1101101; dis2=7'b0110011; end
8'b00101011 : begin dis1 = 7'b1111001; dis2=7'b0110011; end
8'b00101100 : begin dis1 = 7'b0110011; dis2=7'b0110011; end
8'b00101101 : begin dis1 = 7'b1011011; dis2=7'b0110011; end
8'b00101110 : begin dis1 = 7'b1011111; dis2=7'b0110011; end
8'b00101111 : begin dis1 = 7'b1110000; dis2=7'b0110011; end
8'b00110000 : begin dis1 = 7'b1111111; dis2=7'b0110011; end
8'b00110001 : begin dis1 = 7'b1110011; dis2=7'b0110011; end
8'b00110010 : begin dis1 = 7'b1111110; dis2=7'b1011011; end
8'b00110011 : begin dis1 = 7'b0110000; dis2=7'b1011011; end
8'b00110100 : begin dis1 = 7'b1101101; dis2=7'b1011011; end
8'b00110101 : begin dis1 = 7'b1111001; dis2=7'b1011011; end
8'b00110110 : begin dis1 = 7'b0110011; dis2=7'b1011011; end
8'b00110111 : begin dis1 = 7'b1011011; dis2=7'b1011011; end
8'b00111000 : begin dis1 = 7'b1011111; dis2=7'b1011011; end
8'b00111001 : begin dis1 = 7'b1110000; dis2=7'b1011011; end
8'b00111010 : begin dis1 = 7'b1111111; dis2=7'b1011011; end
8'b00111011 : begin dis1 = 7'b1110011; dis2=7'b1011011; end
8'b00111100 : begin dis1 = 7'b1111110; dis2=7'b1011111; end
8'b00111101 : begin dis1 = 7'b0110000; dis2=7'b1011111; end
8'b00111110 : begin dis1 = 7'b1101101; dis2=7'b1011111; end
8'b00111111 : begin dis1 = 7'b1111001; dis2=7'b1011111; end
8'b01000000 : begin dis1 = 7'b0110011; dis2=7'b1011111; end
8'b01000001 : begin dis1 = 7'b1011011; dis2=7'b1011111; end
8'b01000010 : begin dis1 = 7'b1011111; dis2=7'b1011111; end
8'b01000011 : begin dis1 = 7'b1110000; dis2=7'b1011111; end
8'b01000100 : begin dis1 = 7'b1111111; dis2=7'b1011111; end
8'b01000101 : begin dis1 = 7'b1110011; dis2=7'b1011111; end
8'b01000110 : begin dis1 = 7'b1111110; dis2=7'b1110000; end
8'b01000111 : begin dis1 = 7'b0110000; dis2=7'b1110000; end
8'b01001000 : begin dis1 = 7'b1101101; dis2=7'b1110000; end
8'b01001001 : begin dis1 = 7'b1111001; dis2=7'b1110000; end
8'b01001010 : begin dis1 = 7'b0110011; dis2=7'b1110000; end
8'b01001011 : begin dis1 = 7'b1011011; dis2=7'b1110000; end
8'b01001100 : begin dis1 = 7'b1011111; dis2=7'b1110000; end
8'b01001101 : begin dis1 = 7'b1110000; dis2=7'b1110000; end
8'b01001110 : begin dis1 = 7'b1111111; dis2=7'b1110000; end
8'b01001111 : begin dis1 = 7'b1110011; dis2=7'b1110000; end
8'b01010000 : begin dis1 = 7'b1111110; dis2=7'b1111111; end
8'b01010001 : begin dis1 = 7'b0110000; dis2=7'b1111111; end
8'b01010010 : begin dis1 = 7'b1101101; dis2=7'b1111111; end
8'b01010011 : begin dis1 = 7'b1111001; dis2=7'b1111111; end
8'b01010100 : begin dis1 = 7'b0110011; dis2=7'b1111111; end
8'b01010101 : begin dis1 = 7'b1011011; dis2=7'b1111111; end
8'b01010110 : begin dis1 = 7'b1011111; dis2=7'b1111111; end
8'b01010111 : begin dis1 = 7'b1110000; dis2=7'b1111111; end
8'b01011000 : begin dis1 = 7'b1111111; dis2=7'b1111111; end
8'b01011001 : begin dis1 = 7'b1110011; dis2=7'b1111111; end
8'b01011010 : begin dis1 = 7'b1111110; dis2=7'b1110011; end
8'b01011011 : begin dis1 = 7'b0110000; dis2=7'b1110011; end
8'b01011100 : begin dis1 = 7'b1101101; dis2=7'b1110011; end
8'b01011101 : begin dis1 = 7'b1111001; dis2=7'b1110011; end
8'b01011110 : begin dis1 = 7'b0110011; dis2=7'b1110011; end
8'b01011111 : begin dis1 = 7'b1011011; dis2=7'b1110011; end
8'b01100000 : begin dis1 = 7'b1011111; dis2=7'b1110011; end
8'b01100001 : begin dis1 = 7'b1110000; dis2=7'b1110011; end
8'b01100010 : begin dis1 = 7'b1111111; dis2=7'b1110011; end
8'b01100011 : begin dis1 = 7'b1110011; dis2=7'b1110011; end
default : begin dis1 = 7'b1101111; dis2=7'b1101111; end
endcase
// limit1 and binary input comparator
begin
g1 <= ( lim1 > bin )? 1'b1 : 1'b0;
l1 <= ( lim1 < bin )? 1'b1 : 1'b0;
e1 <= ( lim1 == bin)? 1'b1 : 1'b0;
end
// limit2 and binary input comparator
begin
g2 <= ( bin > lim2 )? 1'b1 : 1'b0;
l2 <= ( bin < lim2 )? 1'b1 : 1'b0;
e2 <= ( lim2 == bin)? 1'b1 : 1'b0;
end
// light buzzer when bin is below lim1 or above lim2
buz=( ((~g1)&(l1)&(~e1)&(g2)&(~l2)&(~e2)) |
((g1)&(~l1)&(~e1)&(~g2)&(l2)&(~e2)) );
end
endmodule
